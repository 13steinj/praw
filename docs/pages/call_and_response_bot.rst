.. _call_and_response_bot:

A simple "call and response" bot
================================

A common use case for the PRAW library is writing bots that monitor the
/all/comments feed for comments meeting particular criteria, triggering an
automated response of some kind. To build a bot of this kind, we'll need three
things:

1. An effective way to monitor new comments.

2. A way to evaluate if a comment merits a response.

3. A way to trigger the desired action.

We'll need to provide the latter two parts, but PRAW contains an excellent
convenience function for the first part: ``praw.helpers.comment_stream``, which
yields new comments in the order they are authored while handling rate limiting
for us. We can constrain our attention to comments generated by a single
subreddit, or monitor all public comments on reddit by passing in the subreddit
name "all".

Using this helper function effectively reduces most bots to something like the
following:

.. code-block:: python

    import praw

    UA = 'my user-agent string. Contact me at /u/MyUsername or my@email.com'
    r = praw.Reddit(UA)
    r.login()

    for c in praw.helpers.comment_stream(r, 'all'):
        if check_condition(c):
            bot_action(c)

Now all we need to do is provide functions that check if a comment matches our
response criteria and performs the appropriate action if so.

Working demo: ListFixerBot
--------------------------

Let's say we wanted a bot to correct bad list formatting with lazily-generated
but hopefully improved reddit markdown (snudown). Reddit markdown recognizes
lists when a numbered item is numbered like '1.', '2.' etc. Let's try to fix
lists where the comment author replaced dots with parens. (NB: This bot doesn't
do its job particularly well, but that's OK: It's just a demo

.. code-block:: python

    def check_condition(c):
        text = c.body
        tokens = text.split()
        if "1)" in tokens and "2)" in tokens:
            return True

We can use regular expressions to replace these parens with dots, and even add
preceding line breaks.

.. code-block:: python

    fixed = re.sub(r'([0-9]+)(\))', r'\n\n\1.', c.body)

If we include a "verbose" parameter, we can easily choose whether or not the
function will output relevant text to the console by default.

.. code-block:: python

    def bot_action(c, verbose=True, respond=False):
        fixed = re.sub(r'(\n?)([0-9]+)(\))', r'\n\n\2.', c.body)

        if verbose:
            print c.body.encode("UTF-8")
            print "\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
            print fixed.encode("UTF-8")

We can similarly provide an optional input parameter to choose whether or not
the bot will actually respond to people with corrected text. NB: If we want our
bot to respond, we'll need to be logged in.

Our final ``bot_action`` function looks like this:

.. code-block:: python

    def bot_action(c, verbose=True, respond=False):
        fixed = re.sub(r'(\n?)([0-9]+)(\))', r'\n\n\2.', c.body)

        if verbose:
            print c.body.encode("UTF-8")
            print "\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
            print fixed.encode("UTF-8")

        if respond:
            head = "Hi! Let me try to beautify your comment:\n\n"
            tail = "\n\nI am a bot. You can provide feedback in my subreddit: /r/ListFormatFixer"
            c.reply( header + fixed + tail )

It's generally considered good practice to create a subreddit whose name
matches the name of your bot to centralize discussion, questions, and feature
requests relating to your bot. Referencing this subreddit in your bot's
comments is a good way to inform people how best to provide feedback.

Here's our completed bot!

.. code-block:: python

    import re

    def check_condition(c):
        text = c.body
        tokens = text.split()
        if "1)" in tokens and "2)" in tokens:
            return True

    def bot_action(c, verbose=True, respond=False, session=None):
        fixed = re.sub(r'(\n?)([0-9]+)(\))', r'\n\n\2.', c.body)

        if verbose:
            print c.body.encode("UTF-8")
            print "\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
            print fixed.encode("UTF-8")

    def bot_action(c, verbose=True, respond=False):
        fixed = re.sub(r'(\n?)([0-9]+)(\))', r'\n\n\2.', c.body)

        if verbose:
            print c.body.encode("UTF-8")
            print "\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
            print fixed.encode("UTF-8")

        if respond:
            head = "Hi! Let me try to beautify your comment:\n\n"
            tail = "\n\nI am a bot. You can provide feedback in my subreddit: /r/ListFormatFixer"
            c.reply( header + fixed + tail )

    if __name__ is '__main__':
        import praw
        r = praw.Reddit(UA)

        # Provide a descriptive user-agent string. Explain what your bot does, reference
        # yourself as the author, and offer some preferred contact method. A reddit 
        # username is sufficient, but nothing wrong with adding an email in here.
        UA = 'ListFormatFixer praw demo, Created by /u/shaggorama'

        # If you want the bot to be able to respond to people, you will need to login.
        # It is strongly recommended you login with oAuth
        # http://praw.readthedocs.org/en/stable/pages/oauth.html

        # The following login method is being deprecated soon, but is used in this 
        # demo for the sake of brevity.
        r.login()

        for c in praw.helpers.comment_stream(r, 'all'):
            if check_condition(c):
                #bot_action(c, respond=True)
                bot_action(c)

Keep in mind: bots of this kind are often perceived as annoying and quickly get
banned from many subreddits. If/when your bot gets banned, don't take it
personally.
